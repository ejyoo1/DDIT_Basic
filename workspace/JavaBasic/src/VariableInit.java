
public class VariableInit {
	//변수를 초기화 하는 방법1. - 명시적 초기화
	int var = 10;
	static int staticVar = 20;
	
	//변수를 초기화 하는 방법2. - 초기화 블럭 사용(인스턴스 변수만 초기화할 수 있음.)
	{//블럭을 그냥 열고 닫으면 됨.
		var = 30;
	}
	static{//(클래스 변수만 초기화할 수 있음.)
		staticVar = 40;
	}
	
	//변수를 초기화 하는 방법3. - 생성자
	/*
	 * 생성자
	 * - 클래스와 같은 이름의 메서드
	 * - 인스턴스 변수를 초기화 하기 위해 사용한다.
	 * - 클래스에 생성자는 반드시 하나 이상 존재해야 한다.
	 * - 직접 선언해주지 않으면 컴파일러가 기본 생성자를 만들어준다.
	 * - 생성자는 리턴 타입이 없다.
	 * - 생성자에서 클래스 변수를 초기화 할 수 있으나, 올바른 방법은 아니다.
	 * - 명시적 초기화 하면 되는데 왜 굳이생성자에서 초기화를 하냐?
	 * 
	 * */
	
	//static이 붙은 클래스 변수는 명시적 초기화와 초기화 블럭으로만 초기화 할 수있다.
	
	VariableInit(){
		//생성자를 사용하는 이유
		//초기화에 여러줄의 코드가 필요할 때
		//초기화에 파라미터가 필요할 때
		var = 50;
	}
	
	
	
	public static void main(String[] args) {
		//으.. 객체 여러개일때 너무 귀찮은것!
		Init i = new Init();
		
		i.a = 10;
		i.b = 20;
		i.c = 30;
		
		Init i2 = new Init();
		i2.a = 40;
		i2.b = 50;
		i2.c = 60;
		
		Init i3 = new Init(10,20,30);
		
		Init i4 = new Init(40,50,60);
	}

}


class Init{
	int a;
	int b;
	int c;
	
	//오버로딩 ; 같은 이름의 메서드를 여러개 정의하는 것(파라미터는 달라야함)
	Init(){
		//a = 10;
		//b = 20;
		//c = 30;
		this(10, 20, 30);
		//this() : 생성자에서 다른 생성자를 호출할 때 사용한다.(생성자 안에서 사용할 수 잇음.)
		//코드 상 Init()에서 값을 초기화 하지 않고 다른 생성자인 Init(int a, int b, int c)를 사용해서 초기화를 하고 싶으므로 this(10,20,30)을 호출한 것임.(코드 재사용성 올림)
	}
	
	Init(int a, int b, int c){
		//this : 인스턴스 변수와 지역변수 이름이 같을 때 둘을 구분하기 위해 사용된다.
		//변수 우선순위 지역변수>전역변수
		this.a = a;
		this.b = b;
		this.c = c;
	}
}